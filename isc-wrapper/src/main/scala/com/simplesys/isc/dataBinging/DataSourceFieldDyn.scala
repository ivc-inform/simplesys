package com.simplesys.isc.dataBinging

import com.simplesys.isc.dataBinging.dataSource.CriteriaDyn
import com.simplesys.json._
import com.simplesys.isc.system.typesDyn._
import com.simplesys.isc.forms.formItems.FormItemDyn
import com.simplesys.isc.system.{ArrayDyn, ClassDyn}
import com.simplesys.isc.forms.ValidatorDyn
import com.simplesys.json.JsonString
import com.simplesys.isc.system.misc.XPathExpression
import com.simplesys.isc.system.misc.Number
import com.simplesys.isc.system.misc.Bool

object DataSourceFieldDyn {
    implicit def DataSourceField1toJsonObject(in: DataSourceFieldDyn): JsonObject = in json
}

class DataSourceFieldDyn(override val inJson: JsonObject = null) extends ClassDyn with DataSourceFieldDymInit {
    override val selfName = "DataSourceField"

    private[this] var _autoGenerated: Bool = autoGenerated
    def AutoGenerated = _autoGenerated
    def AutoGenerated_=(value: Bool) {
        if (_autoGenerated == value) return
        json("autoGenerated") = value
        _autoGenerated = value
    }

    private[this] var _primaryKey: Bool = primaryKey
    def PrimaryKey = _primaryKey
    def PrimaryKey_=(value: Bool) {
        if (_primaryKey == value) return
        json("primaryKey") = value
        _primaryKey = value
    }

    def Type = json.getJsonElement("type").getOrElse(`type`)
    def Type_=(value: JsonElement) {
        if (Type == value) return
        json("type") = value
    }

    private[this] var _foreignKey = foreignKey
    def ForeignKey = _foreignKey
    def ForeignKey_=(value: String) {
        if (_foreignKey == value) return
        json("foreignKey") = value
        _foreignKey = value
    }

    private[this] var _childrenProperty: Bool = childrenProperty
    def ChildrenProperty = _childrenProperty
    def ChildrenProperty_=(value: Bool) {
        if (_childrenProperty == value) return
        json("childrenProperty") = value
        _childrenProperty = value
    }

    private[this] var _hidden: Bool = hidden
    def Hidden = _hidden
    def Hidden_=(value: Bool) {
        if (_hidden == value) return
        json("hidden") = value
        _hidden = value
    }

    def RootValue = json.getStringOpt("rootValue").getOrElse(rootValue)
    def RootValue_=(value: String) {
        if (RootValue == value) return
        json("rootValue") = value
    }

    private[this] var _autoQuoteCustomExpressions: Bool = autoQuoteCustomExpressions
    def AutoQuoteCustomExpressions = _autoQuoteCustomExpressions
    def AutoQuoteCustomExpressions_=(value: Bool) {
        if (_autoQuoteCustomExpressions == value) return
        json("autoQuoteCustomExpressions") = value
        _autoQuoteCustomExpressions = value
    }

    def CanEdit = json.getBoolOpt("canEdit").getOrElse(canEdit)
    def CanEdit_=(value: Bool) {
        if (CanEdit == value) return
        json("canEdit") = value
    }

    private[this] var _canExport: Bool = canExport
    def CanExport = _canExport
    def CanExport_=(value: Bool) {
        if (_canExport == value) return
        json("canExport") = value
        _canExport = value
    }

    private[this] var _canFilter: Bool = canFilter
    def CanFilter = _canFilter
    def CanFilter_=(value: Bool) {
        if (_canFilter == value) return
        json("canFilter") = value
        _canFilter = value
    }

    private[this] var _canSave: Bool = canSave
    def CanSave = _canSave
    def CanSave_=(value: Bool) {
        if (_canSave == value) return
        json("canSave") = value
        _canSave = value
    }

    private[this] var _canSortClientOnly: Bool = canSortClientOnly
    def CanSortClientOnly = _canSortClientOnly
    def CanSortClientOnly_=(value: Bool) {
        if (_canSortClientOnly == value) return
        json("canSortClientOnly") = value
        _canSortClientOnly = value
    }

    private[this] var _canView: Bool = canView
    def CanView = _canView
    def CanView_=(value: Bool) {
        if (_canView == value) return
        json("canView") = value
        _canView = value
    }

    private[this] var _childTagName: String = childTagName
    def ChildTagName = _childTagName
    def ChildTagName_=(value: String) {
        if (_childTagName == value) return
        json("childTagName") = value
        _childTagName = value
    }

    private[this] var _creatorOverrides: Bool = creatorOverrides
    def CreatorOverrides = _creatorOverrides
    def CreatorOverrides_=(value: Bool) {
        if (_creatorOverrides == value) return
        json("creatorOverrides") = value
        _creatorOverrides = value
    }

    private[this] var _customCriteriaExpression: String = customCriteriaExpression
    def CustomCriteriaExpression = _customCriteriaExpression
    def CustomCriteriaExpression_=(value: String) {
        if (_customCriteriaExpression == value) return
        json("customCriteriaExpression") = value
        _customCriteriaExpression = value
    }

    private[this] var _customInsertExpression: String = customInsertExpression
    def CustomInsertExpression = _customInsertExpression
    def CustomInsertExpression_=(value: String) {
        if (_customInsertExpression == value) return
        json("customInsertExpression") = value
        _customInsertExpression = value
    }

    private[this] var _customSelectExpression: String = customSelectExpression
    def CustomSelectExpression = _customSelectExpression
    def CustomSelectExpression_=(value: String) {
        if (_customSelectExpression == value) return
        json("customSelectExpression") = value
        _customSelectExpression = value
    }

    private[this] var _customSQL: Bool = customSQL
    def CustomSQL = _customSQL
    def CustomSQL_=(value: Bool) {
        if (_customSQL == value) return
        json("customSQL") = value
        _customSQL = value
    }

    private[this] var _customUpdateExpression: String = customUpdateExpression
    def CustomUpdateExpression = _customUpdateExpression
    def CustomUpdateExpression_=(value: String) {
        if (_customUpdateExpression == value) return
        json("customUpdateExpression") = value
        _customUpdateExpression = value
    }

    def DateFormatter = json.getValue2[JsonString, DateDisplayFormat]("dateFormatter").getOrElse(dateFormatter)
    def DateFormatter_=(value: DateDisplayFormat) {
        if (DateFormatter == value) return
        json("dateFormatter") = value
    }

    def DecimalPad = json.getNumberOpt("decimalPad").getOrElse(decimalPad)
    def DecimalPad_=(value: Number) {
        if (DecimalPad == value) return
        json("decimalPad") = value
    }

    def DecimalPrecision = json.getNumberOpt("decimalPrecision").getOrElse(decimalPrecision)
    def DecimalPrecision_=(value: Number) {
        if (DecimalPrecision == value) return
        json("decimalPrecision") = value
    }

    private[this] var _detail: Bool = detail
    def Detail = _detail
    def Detail_=(value: Bool) {
        if (_detail == value) return
        json("detail") = value
        _detail = value
    }

    def DisplayField = json.getStringOpt("displayField").getOrElse(displayField)
    def DisplayField_=(value: String) {
        if (DisplayField == value) return
        json("displayField") = value
    }

    def ValueField = json.getStringOpt("valueField").getOrElse(valueField)
    def ValueField_=(value: String) {
        if (ValueField == value) return
        json("valueField") = value
    }

    def EditorType = json.getValue2[JsonObject, FormItemDyn]("editorType").getOrElse(editorType)
    def EditorType_=(value: FormItemDyn) {
        if (EditorType == value) return
        json("editorType") = value
    }

    private[this] var _editRequiresAuthentication: Bool = editRequiresAuthentication
    def EditRequiresAuthentication = _editRequiresAuthentication
    def EditRequiresAuthentication_=(value: Bool) {
        if (_editRequiresAuthentication == value) return
        json("editRequiresAuthentication") = value
        _editRequiresAuthentication = value
    }

    private[this] var _editRequiresRole: String = editRequiresRole
    def EditRequiresRole = _editRequiresRole
    def EditRequiresRole_=(value: String) {
        if (_editRequiresRole == value) return
        json("editRequiresRole") = value
        _editRequiresRole = value
    }

    private[this] var _encodeInResponse: Bool = encodeInResponse
    def EncodeInResponse = _encodeInResponse
    def EncodeInResponse_=(value: Bool) {
        if (_encodeInResponse == value) return
        json("encodeInResponse") = value
        _encodeInResponse = value
    }

    private[this] var _escapeHTML: Bool = escapeHTML
    def EscapeHTML = _escapeHTML
    def EscapeHTML_=(value: Bool) {
        if (_escapeHTML == value) return
        json("escapeHTML") = value
        _escapeHTML = value
    }

    private[this] var _exportTitle: String = exportTitle
    def ExportTitle = _exportTitle
    def ExportTitle_=(value: String) {
        if (_exportTitle == value) return
        json("exportTitle") = value
        _exportTitle = value
    }

    def FkColumnCode = json.getStringOpt("fkColumnCode").getOrElse(fkColumnCode)
    def FkColumnCode_=(value: String) {
        if (FkColumnCode == value) return
        json("fkColumnCode") = value
    }

    def FkTableCode = json.getStringOpt("fkTableCode").getOrElse(fkTableCode)
    def FkTableCode_=(value: String) {
        if (FkTableCode == value) return
        json("fkTableCode") = value
    }

    private[this] var _ignore: Bool = ignore
    def Ignore = _ignore
    def Ignore_=(value: Bool) {
        if (_ignore == value) return
        json("ignore") = value
        _ignore = value
    }

    private[this] var _imageHeight: Number = imageHeight
    def ImageHeight = _imageHeight
    def ImageHeight_=(value: Number) {
        if (_imageHeight == value) return
        json("imageHeight") = value
        _imageHeight = value
    }

    private[this] var _imageSize: Number = imageSize
    def ImageSize = _imageSize
    def ImageSize_=(value: Number) {
        if (_imageSize == value) return
        json("imageSize") = value
        _imageSize = value
    }

    private[this] var _imageWidth: Number = imageWidth
    def ImageWidth = _imageWidth
    def ImageWidth_=(value: Number) {
        if (_imageWidth == value) return
        json("imageWidth") = value
        _imageWidth = value
    }

    private[this] var _inapplicable: Bool = inapplicable
    def Inapplicable = _inapplicable
    def Inapplicable_=(value: Bool) {
        if (_inapplicable == value) return
        json("inapplicable") = value
        _inapplicable = value
    }

    private[this] var _includeFrom: String = includeFrom
    def IncludeFrom = _includeFrom
    def IncludeFrom_=(value: String) {
        if (_includeFrom == value) return
        json("includeFrom") = value
        _includeFrom = value
    }

    def InitRequiresAuthentication = json.getBoolOpt("initRequiresAuthentication").getOrElse(initRequiresAuthentication)
    def InitRequiresAuthentication_=(value: Bool) {
        if (InitRequiresAuthentication == value) return
        json("initRequiresAuthentication") = value
    }

    private[this] var _initRequiresRole: String = initRequiresRole
    def InitRequiresRole = _initRequiresRole
    def InitRequiresRole_=(value: String) {
        if (_initRequiresRole == value) return
        json("initRequiresRole") = value
        _initRequiresRole = value
    }

    private[this] var _javaClass: String = javaClass
    def JavaClass = _javaClass
    def JavaClass_=(value: String) {
        if (_javaClass == value) return
        json("javaClass") = value
        _javaClass = value
    }

    def JoinType = json.getValue2[JsonString, JoinType]("joinType").getOrElse(joinType)
    def JoinType_=(value: JoinType) {
        if (JoinType == value) return
        json("joinType") = value
    }

    private[this] var _javaCollectionClass: String = javaCollectionClass
    def JavaCollectionClass = _javaCollectionClass
    def JavaCollectionClass_=(value: String) {
        if (_javaCollectionClass == value) return
        json("javaCollectionClass") = value
        _javaCollectionClass = value
    }

    private[this] var _javaKeyClass: String = javaKeyClass
    def JavaKeyClass = _javaKeyClass
    def JavaKeyClass_=(value: String) {
        if (_javaKeyClass == value) return
        json("javaKeyClass") = value
        _javaKeyClass = value
    }

    private[this] var _length: Number = length
    def Length = _length
    def Length_=(value: Number) {
        if (_length == value) return
        json("length") = value
        _length = value
    }

    private[this] var _maxFileSize: Number = maxFileSize
    def MaxFileSize = _maxFileSize
    def MaxFileSize_=(value: Number) {
        if (_maxFileSize == value) return
        json("maxFileSize") = value
        _maxFileSize = value
    }

    private[this] var _multiple: Bool = multiple
    def Multiple = _multiple
    def Multiple_=(value: Bool) {
        if (_multiple == value) return
        json("multiple") = value
        _multiple = value
    }

    def Name = json.getStringOpt("name").getOrElse(name)
    def Name_=(value: String) {
        if (Name == value) return
        json("name") = value
    }

    private[this] var _nativeName: String = nativeName
    def NativeName = _nativeName
    def NativeName_=(value: String) {
        if (_nativeName == value) return
        json("nativeName") = value
        _nativeName = value
    }

    def Nillable = json.getBoolOpt("nillable").getOrElse(nillable)
    def Nillable_=(value: Bool) {
        if (Nillable == value) return
        json("nillable") = value
    }

    private[this] var _nullReplacementValue: JsonObject = nullReplacementValue
    def NullReplacementValue = _nullReplacementValue
    def NullReplacementValue_=(value: JsonObject) {
        json("nullReplacementValue") = value
        _nullReplacementValue = value
    }
    private[this] var _propertiesOnly: Bool = propertiesOnly
    def PropertiesOnly = _propertiesOnly
    def PropertiesOnly_=(value: Bool) {
        if (_propertiesOnly == value) return
        json("propertiesOnly") = value
        _propertiesOnly = value
    }

    def Required = json.getBoolOpt("required").getOrElse(required)
    def Required_=(value: Bool) {
        if (Required == value) return
        json("required") = value
    }

    private[this] var _sequenceName: String = sequenceName
    def SequenceName = _sequenceName
    def SequenceName_=(value: String) {
        if (_sequenceName == value) return
        json("sequenceName") = value
        _sequenceName = value
    }

    private[this] var _showFileInline: Bool = showFileInline
    def ShowFileInline = _showFileInline
    def ShowFileInline_=(value: Bool) {
        if (_showFileInline == value) return
        json("showFileInline") = value
        _showFileInline = value
    }

    private[this] var _sqlDateFormat: String = sqlDateFormat
    def SqlDateFormat = _sqlDateFormat
    def SqlDateFormat_=(value: String) {
        if (_sqlDateFormat == value) return
        json("sqlDateFormat") = value
        _sqlDateFormat = value
    }

    private[this] var _sqlFalseValue: String = sqlFalseValue
    def SqlFalseValue = _sqlFalseValue
    def SqlFalseValue_=(value: String) {
        if (_sqlFalseValue == value) return
        json("sqlFalseValue") = value
        _sqlFalseValue = value
    }

    private[this] var _sqlStorageStrategy: String = sqlStorageStrategy
    def SqlStorageStrategy = _sqlStorageStrategy
    def SqlStorageStrategy_=(value: String) {
        if (_sqlStorageStrategy == value) return
        json("sqlStorageStrategy") = value
        _sqlStorageStrategy = value
    }

    private[this] var _sqlTrueValue: String = sqlTrueValue
    def SqlTrueValue = _sqlTrueValue
    def SqlTrueValue_=(value: String) {
        if (_sqlTrueValue == value) return
        json("sqlTrueValue") = value
        _sqlTrueValue = value
    }

    private[this] var _storeWithHash: HashAlgorithm = storeWithHash
    def StoreWithHash = _storeWithHash
    def StoreWithHash_=(value: HashAlgorithm) {
        if (_storeWithHash == value) return
        json("storeWithHash") = value
        _storeWithHash = value
    }

    private[this] var _summaryFunction: SummaryFunction = summaryFunction
    def SummaryFunction = _summaryFunction
    def SummaryFunction_=(value: SummaryFunction) {
        if (_summaryFunction == value) return
        json("summaryFunction") = value
        _summaryFunction = value
    }

    private[this] var _summaryValueTitle: String = summaryValueTitle
    def SummaryValueTitle = _summaryValueTitle
    def SummaryValueTitle_=(value: String) {
        if (_summaryValueTitle == value) return
        json("summaryValueTitle") = value
        _summaryValueTitle = value
    }

    private[this] var _tableName: String = tableName
    def TableName = _tableName
    def TableName_=(value: String) {
        if (_tableName == value) return
        json("tableName") = value
        _tableName = value
    }

    def TimeFormatter = json.getValue2[JsonString, TimeDisplayFormat]("timeFormatter").getOrElse(timeFormatter)
    def TimeFormatter_=(value: TimeDisplayFormat) {
        if (TimeFormatter == value) return
        json("timeFormatter") = value
    }

    def Title = json.getStringOpt("title").getOrElse(title)
    def Title_=(value: String) {
        if (Title == value) return
        json("title") = value
    }

    private[this] var _updateRequiresRole: String = updateRequiresRole
    def UpdateRequiresRole = _updateRequiresRole
    def UpdateRequiresRole_=(value: String) {
        if (_updateRequiresRole == value) return
        json("updateRequiresRole") = value
        _updateRequiresRole = value
    }

    def UpdateRequiresAuthentication = json.getBoolOpt("updateRequiresAuthentication").getOrElse(updateRequiresAuthentication)
    def UpdateRequiresAuthentication_=(value: Bool) {
        if (UpdateRequiresAuthentication == value) return
        json("updateRequiresAuthentication") = value
    }

    private[this] var _uploadFieldName: String = uploadFieldName
    def UploadFieldName = _uploadFieldName
    def UploadFieldName_=(value: String) {
        if (_uploadFieldName == value) return
        json("uploadFieldName") = value
        _uploadFieldName = value
    }

    def Validators = json.getValue2[JsonList, ArrayDyn[ValidatorDyn]]("validators").getOrElse(validators)
    def Validators_=(value: ArrayDyn[ValidatorDyn]) {
        if (Validators == value) return
        json("validators") = value
    }

    def ValidOperators = json.getJsonListOpt("validOperators").getOrElse(validOperators)
    def ValidOperators_=(value: JsonList) {
        if (ValidOperators == value) return
        json("validOperators") = value
    }

    def ValueMap = json.getJsonElement("valueMap").getOrElse(valueMap)
    def ValueMap_=(value: JsonElement) {
        if (ValueMap == value) return
        json("valueMap") = value
    }

    def ValueMapEnum = json.getStringOpt("valueMapEnum").getOrElse(valueMapEnum)
    def ValueMapEnum_=(value: String) {
        if (ValueMapEnum == value) return
        json("valueMapEnum") = value
    }

    private[this] var _valueWriteXPath: XPathExpression = valueWriteXPath
    def ValueWriteXPath = _valueWriteXPath
    def ValueWriteXPath_=(value: XPathExpression) {
        if (_valueWriteXPath == value) return
        json("valueWriteXPath") = value
        _valueWriteXPath = value
    }

    private[this] var _valueXPath: XPathExpression = valueXPath
    def ValueXPath = _valueXPath
    def ValueXPath_=(value: XPathExpression) {
        if (_valueXPath == value) return
        json("valueXPath") = value
        _valueXPath = value
    }

    private[this] var _viewRequiresAuthentication: Bool = viewRequiresAuthentication
    def ViewRequiresAuthentication = _viewRequiresAuthentication
    def ViewRequiresAuthentication_=(value: Bool) {
        if (_viewRequiresAuthentication == value) return
        json("viewRequiresAuthentication") = value
        _viewRequiresAuthentication = value
    }

    private[this] var _viewRequiresRole: String = viewRequiresRole
    def ViewRequiresRole = _viewRequiresRole
    def ViewRequiresRole_=(value: String) {
        if (_viewRequiresRole == value) return
        json("viewRequiresRole") = value
        _viewRequiresRole = value
    }

    private[this] var _xmlAttribute: Bool = xmlAttribute
    def XmlAttribute = _xmlAttribute
    def XmlAttribute_=(value: Bool) {
        if (_xmlAttribute == value) return
        json("xmlAttribute") = value
        _xmlAttribute = value
    }

    private[this] var _readOnlyEditorType: FormItemDyn = readOnlyEditorType
    def ReadOnlyEditorType = _readOnlyEditorType
    def ReadOnlyEditorType_=(value: FormItemDyn) {
        if (_readOnlyEditorType == value) return
        json("readOnlyEditorType") = value
        _readOnlyEditorType = value
    }

    def Format = json.getStringOpt("format").getOrElse(format)
    def Format_=(value: String) {
        if (Format == value) return
        json("format") = value
        json("mask") = value
    }

    def Width = json.getNumberOpt("width").getOrElse(width)
    def Width_=(value: Number) {
        if (Width == value) return
        json("width") = value
    }

    def Lookup = json.getBooleanOpt("lookup").getOrElse(lookup)
    def Lookup_=(value: Boolean) {
        if (Lookup == value) return
        json("lookup") = value
    }

    def CaptionClassLookup = json.getStringOpt("captionClassLookup").getOrElse(captionClassLookup)
    def CaptionClassLookup_=(value: String) {
        if (CaptionClassLookup == value) return
        json("captionClassLookup") = value
    }

    def ForeignField = json.getStringOpt("foreignField").getOrElse(foreignField)
    def ForeignField_=(value: String) {
        if (ForeignField == value) return
        json("foreignField") = value
    }


    def OptionDataSource = json.getValue2[JsonObject, DataSourceDyn]("optionDataSource").getOrElse(optionDataSource)
    def OptionDataSource_=(value: DataSourceDyn) {
        if (OptionDataSource == value) return
        json("optionDataSource") = value
    }

    def OptionDataSource1 = json.getJsonElement("optionDataSource1").getOrElse(optionDataSource1)
    def OptionDataSource1_=(value: JsonElement) {
        if (OptionDataSource1 == value) return
        json("optionDataSource") = value
    }
}

